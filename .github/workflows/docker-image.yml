name: Docker Image CI

on:
  workflow_dispatch:

jobs:

  build:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    
    - name: install deps
      run: |
        sudo apt-get update
        sudo apt-get install --yes git wget python3.6 python3-pip libosmesa6-dev xorg-dev libglu1-mesa-dev python3-dev libsdl2-dev libc++-7-dev libc++abi-7-dev ninja-build libxi-dev libtbb-dev libosmesa6-dev libudev-dev autoconf libssl-dev libtool
        rm -rf /var/lib/apt/lists/*
        
    - name: install pyenv
      run: |
        wget -q -O - https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
        echo "PATH=/root/.pyenv/bin/:$PATH" >> $GITHUB_ENV
        pyenv install 3.9.7
        eval "$(pyenv virtualenv-init --path -)" && pyenv global 3.9.7
        PATH="/root/.pyenv/shims:${PATH}"
        pip install numpy
      
    - name: Install cmake 22
      working-directory: /
      run: |
        sudo wget -q https://github.com/Kitware/CMake/releases/download/v3.22.2/cmake-3.22.2-linux-x86_64.sh
        sudo sh ./cmake-3.22.2-linux-x86_64.sh --prefix=/ --exclude-subdir --skip-license
        echo "PATH=/bin:$PATH" >> $GITHUB_ENV

    - name: clone open3d
      working-directory: $HOME
      run: |
        git clone https://github.com/isl-org/Open3D.git open3d
        mkdir $HOME/open3d/build
      
    - name: cmake
      working-directory: $HOME/open3d/build
      run: cmake -DENABLE_HEADLESS_RENDERING=ON -DBUILD_WEBRTC=OFF -DBUILD_GUI=OFF -DUSE_SYSTEM_GLEW=OFF -DUSE_SYSTEM_GLFW=OFF -DPYTHON_EXECUTABLE=$(pyenv prefix)/bin/python -DBUILD_CUDA_MODULE=OFF -DBUILD_PYTORCH_OPS=OFF -DBUILD_TENSORFLOW_OPS=OFF -DBUNDLE_OPEN3D_ML=OFF -DCMAKE_BUILD_TYPE=Release ..
        
    - name: make
      working-directory: $HOME/open3d/build
      run: make -j python-package
      
    - name: tar the release
      run: tar -zcf open3d-headless.tar.gz lib
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Test upload-to-github-release works with ```actions/create-release```
        draft: true
        prerelease: false
    - uses: xresloader/upload-to-github-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "open3d-headless.tar.gz "
        release_id: ${{ steps.create_release.outputs.id }}
        overwrite: true
        verbose: true
    
